cmd := DROP TABLE id SEMICOLON #1
    | TRUNCATE TABLE id SEMICOLON #2
    | create SEMICOLON
    | alter SEMICOLON
    | insert SEMICOLON
    | query SEMICOLON
create := CREATE TABLE id LPAREN newCols RPAREN #3
alter := ALTER TABLE id ADD newCol #4
    | ALTER TABLE id DROP id #5
newCols := newCols COMMA newCol #6
    | newCol
newCol := id type modifiers #7
type := INTTYPE #8
    | STRINGTYPE LPAREN INT RPAREN #9
    | DATETIMETYPE #10
    | FLOATTYPE #11
modifiers := modifier modifiers
    | 
modifier := NULL #12
    | NOT NULL #13
    | PRIMARYKEY #14
    | AUTOINC #15
insert := INSERT id LPAREN colList RPAREN VALUES LPAREN valueList RPAREN #16
query := select from where
select := SELECT cols #17
from := FROM tableList #18
where := WHERE predicate #19
    |
cols := DISTINCT colList #20
    | WILDCARD #21
    | colList
colList := id #22
    | colList COMMA id #23
tableList := table #22
    | tableList COMMA table #23
table := table NATJOIN table AS id #24
    | table INNERJOIN table ON predicate #25
    | LPAREN query RPAREN AS id #26
    | id
id := ID #27
predicate := eqexp AND eqexp #28
    | eqexp OR eqexp #29
    | eqexp
eqexp := addexp EQUALS addexp #30
    | addexp NEQUALS addexp #31
    | addexp LESS addexp #32
    | addexp LESSEQ addexp #33
    | addexp GREATER addexp #34
    | addexp GREATEREQ addexp #35
    | addexp
addexp := multexp PLUS multexp #36
    | multexp MINUS multexp #37
    | multexp
multexp := unaryexp WILDCARD unaryexp #38
    | unaryexp DIVIDE unaryexp #39
    | unaryexp EXPONENT unaryexp #40
    | unaryexp
unaryexp := NOT term #41
    | MINUS term #42
    | PLUS term #43
    | term
term := LPAREN predicate RPAREN
    | value
    | id
value := INT #44
    | BOOL #45
    | STRING #46
    | FLOAT #47
valueList := value #22
    | valueList COMMA value #23

###

requires {
    import datetime
    import table
    import parser.RelAlgeTree as RAT
}

#1 {
    p.semstack = [RAT.Drop(p.semstack[0])] + p.semstack[1:]
}

#2 {
    p.semstack = [RAT.Truncate(p.semstack[0])] + p.semstack[1:]
}

#3 {
    p.semstack = [RAT.Create(p.semstack[1], p.semstack[0])] + p.semstack[2:]
}

#4 {
    p.semstack = [RAT.Alter(p.semstack[1], True, p.semstack[0])] + p.semstack[2:]
}

#5 {
    p.semstack = [RAT.Alter(p.semstack[1], False, p.semstack[0])] + p.semstack[2:]
}

#6 {
    p.semstack = [{**p.semstack[1], **p.semstack[0]}] + p.semstack[2:]
}

#7 {
    p.semstack = [{p.semstack[1].id: p.semstack[0]}] + p.semstack[2:]
}

#8 {
    p.semstack = [[int]] + p.semstack
}

#9 {
    p.semstack = [[str]] + p.semstack
}

#10 {
    p.semstack = [[datetime.datetime]] + p.semstack
}

#11 {
    p.semstack = [[float]] + p.semstack
}

#12 {
    p.semstack = [p.semstack[0] + [table.Schema.NULL]] + p.semstack[1:]
}

#13 {
    p.semstack = [p.semstack[0] + [table.Schema.NULLNT]] + p.semstack[1:]
}

#14 {
    p.semstack = [p.semstack[0] + [table.Schema.PRIMARY_KEY]] + p.semstack[1:]
}

#15 {
    p.semstack = [p.semstack[0] + [table.Schema.INCREMENT]] + p.semstack[1:]
}

#16 {
    entry = dict(zip(map(lambda x: x.id, p.semstack[1]), p.semstack[0]))
    p.semstack = [RAT.Insert(p.semstack[2], entry)] + p.semstack[3:]
}

#17 {
    if p.semstack[0] == 'WILDCARD':
        p.semstack = p.semstack[1:]
    elif p.semstack[0] == 'DISTINCT':
        p.semstack = [RAT.Projection(p.semstack[1], None, True)] + p.semstack[2:]
    else:
        p.semstack = [RAT.Projection(p.semstack[0], None, False)] + p.semstack[1:]
}

#18 {
    if len(p.semstack) > 1 and isinstance(p.semstack[1], RAT.Projection) and p.semstack[1].subtree == None:
        p.semstack[1].subtree = p.semstack[0]
        p.semstack = p.semstack[1:]
}

#19 {
    if isinstance(p.semstack[1], RAT.Projection):
        p.semstack[1].subtree = RAT.Selection(p.semstack[1].subtree, p.semstack[0])
        p.semstack = p.semstack[1:]
    else:
        p.semstack = [RAT.Selection(p.semstack[1], p.semstack[0])] + p.semstack[2:]
}

#20 {
    p.semstack = ["DISTINCT"] + p.semstack
}

#21 {
    p.semstack = ["WILDCARD"] + p.semstack
}

#22 {
    p.semstack = [[p.semstack[0]]] + p.semstack[1:]
}

#23 {
    p.semstack = [p.semstack[1] + [p.semstack[0]]] + p.semstack[2:]
}

#24 {
    p.semstack = [RAT.Rename(RAT.NatJoin(p.semstack[2], p.semstack[1]), p.semstack[0])] + p.semstack[3:]
}

#25 {
    p.semstack = [RAT.InnerJoin(p.semstack[2], p.semstack[1], p.semstack[0])] + p.semstack[3:]
}

#26 {
    p.semstack = [RAT.Rename(p.semstack[1], p.semstack[0])] + p.semstack[2:]
}

#27 {
    p.semstack = [RAT.Identifier(p.currentToken)] + p.semstack
}

#28 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], 'AND')] + p.semstack[2:]
}

#29 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], 'OR')] + p.semstack[2:]
}

#30 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '=')] + p.semstack[2:]
}

#31 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '<>')] + p.semstack[2:]
}

#32 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '<')] + p.semstack[2:]
}

#33 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '<=')] + p.semstack[2:]
}

#34 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '>')] + p.semstack[2:]
}

#35 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '>=')] + p.semstack[2:]
}

#36 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '+')] + p.semstack[2:]
}

#37 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '-')] + p.semstack[2:]
}

#38 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '*')] + p.semstack[2:]
}

#39 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '/')] + p.semstack[2:]
}

#40 {
    p.semstack = [RAT.Binary(p.semstack[1], p.semstack[0], '**')] + p.semstack[2:]
}

#41 {
    p.semstack = [RAT.Unary(p.semstack[0], 'NOT')] + p.semstack[1:]
}

#42 {
    p.semstack = [RAT.Unary(p.semstack[0], '-')] + p.semstack[1:]
}

#43 {
    p.semstack = [RAT.Unary(p.semstack[0], '+')] + p.semstack[1:]
}

#44 {
    p.semstack = [int(p.currentToken)] + p.semstack
}

#45 {
    p.semstack = [p.currentToken.lower()[0] == 't'] + p.semstack
}

#46 {
    p.semstack = [p.currentToken[1:-1]] + p.semstack
}

#47 {
    p.semstack = [float(p.currentToken)] + p.semstack
}